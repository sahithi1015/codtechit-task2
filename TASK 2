# Step 1: Load and explore the dataset
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Creating a synthetic dataset for demonstration purposes
np.random.seed(0)
X = 2 * np.random.rand(100, 1)
y = 4 + 3 * X + np.random.randn(100, 1)

# Convert to DataFrame for better visualization
data = pd.DataFrame(np.hstack((X, y)), columns=['X', 'y'])

# Step 2: Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

# Step 3: Train the linear regression model on the training data
regressor = LinearRegression()
regressor.fit(X_train, y_train)

# Step 4: Evaluate the model's performance
y_train_pred = regressor.predict(X_train)
y_test_pred = regressor.predict(X_test)

mse_train = mean_squared_error(y_train, y_train_pred)
mse_test = mean_squared_error(y_test, y_test_pred)
r2_train = r2_score(y_train, y_train_pred)
r2_test = r2_score(y_test, y_test_pred)

print(f'Training MSE: {mse_train}, Training R-squared: {r2_train}')
print(f'Testing MSE: {mse_test}, Testing R-squared: {r2_test}')

# Step 5: Make predictions on the test set
y_pred = regressor.predict(X_test)

# Step 6: Visualize the regression line and the actual vs. predicted values
plt.figure(figsize=(14, 7))

# Plotting the regression line
plt.subplot(1, 2, 1)
plt.scatter(X, y, color='blue')
plt.plot(X, regressor.predict(X), color='red', linewidth=2)
plt.title('Regression Line')
plt.xlabel('X')
plt.ylabel('y')

# Plotting actual vs. predicted values
plt.subplot(1, 2, 2)
plt.scatter(y_test, y_pred, color='blue')
plt.plot([y.min(), y.max()], [y.min(), y.max()], 'r--', linewidth=2)
plt.title('Actual vs Predicted')
plt.xlabel('Actual values')
plt.ylabel('Predicted values')

plt.tight_layout()
plt.show()
